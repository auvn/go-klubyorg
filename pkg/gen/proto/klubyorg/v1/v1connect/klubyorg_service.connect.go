// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: klubyorg/v1/klubyorg_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/auvn/go-klubyorg/pkg/gen/proto/klubyorg/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GetCourtsServiceName is the fully-qualified name of the GetCourtsService service.
	GetCourtsServiceName = "klubyorg.v1.GetCourtsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GetCourtsServiceGetCourtsProcedure is the fully-qualified name of the GetCourtsService's
	// GetCourts RPC.
	GetCourtsServiceGetCourtsProcedure = "/klubyorg.v1.GetCourtsService/GetCourts"
)

// GetCourtsServiceClient is a client for the klubyorg.v1.GetCourtsService service.
type GetCourtsServiceClient interface {
	GetCourts(context.Context, *connect_go.Request[v1.GetCourtsRequest]) (*connect_go.Response[v1.GetCourtsResponse], error)
}

// NewGetCourtsServiceClient constructs a client for the klubyorg.v1.GetCourtsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGetCourtsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GetCourtsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &getCourtsServiceClient{
		getCourts: connect_go.NewClient[v1.GetCourtsRequest, v1.GetCourtsResponse](
			httpClient,
			baseURL+GetCourtsServiceGetCourtsProcedure,
			opts...,
		),
	}
}

// getCourtsServiceClient implements GetCourtsServiceClient.
type getCourtsServiceClient struct {
	getCourts *connect_go.Client[v1.GetCourtsRequest, v1.GetCourtsResponse]
}

// GetCourts calls klubyorg.v1.GetCourtsService.GetCourts.
func (c *getCourtsServiceClient) GetCourts(ctx context.Context, req *connect_go.Request[v1.GetCourtsRequest]) (*connect_go.Response[v1.GetCourtsResponse], error) {
	return c.getCourts.CallUnary(ctx, req)
}

// GetCourtsServiceHandler is an implementation of the klubyorg.v1.GetCourtsService service.
type GetCourtsServiceHandler interface {
	GetCourts(context.Context, *connect_go.Request[v1.GetCourtsRequest]) (*connect_go.Response[v1.GetCourtsResponse], error)
}

// NewGetCourtsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGetCourtsServiceHandler(svc GetCourtsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	getCourtsServiceGetCourtsHandler := connect_go.NewUnaryHandler(
		GetCourtsServiceGetCourtsProcedure,
		svc.GetCourts,
		opts...,
	)
	return "/klubyorg.v1.GetCourtsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GetCourtsServiceGetCourtsProcedure:
			getCourtsServiceGetCourtsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGetCourtsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGetCourtsServiceHandler struct{}

func (UnimplementedGetCourtsServiceHandler) GetCourts(context.Context, *connect_go.Request[v1.GetCourtsRequest]) (*connect_go.Response[v1.GetCourtsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("klubyorg.v1.GetCourtsService.GetCourts is not implemented"))
}
